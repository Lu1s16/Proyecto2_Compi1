/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,18],$V2=[1,28],$V3=[1,30],$V4=[1,39],$V5=[1,32],$V6=[1,33],$V7=[1,34],$V8=[1,35],$V9=[1,36],$Va=[1,37],$Vb=[1,52],$Vc=[1,53],$Vd=[1,64],$Ve=[1,63],$Vf=[1,55],$Vg=[1,73],$Vh=[1,69],$Vi=[1,70],$Vj=[1,71],$Vk=[1,68],$Vl=[1,67],$Vm=[1,66],$Vn=[1,65],$Vo=[1,54],$Vp=[1,62],$Vq=[1,72],$Vr=[1,74],$Vs=[1,75],$Vt=[1,61],$Vu=[1,56],$Vv=[1,57],$Vw=[1,58],$Vx=[1,59],$Vy=[1,60],$Vz=[5,20,22,34,41,44,50,53,56,59,61,62,63,66,67,70,73,75,77,78,80,82,83,84,86,88,90,91,92,102,103,104,105,107,116,117,118,119,120],$VA=[1,90],$VB=[1,91],$VC=[1,96],$VD=[1,94],$VE=[1,95],$VF=[1,82],$VG=[1,83],$VH=[1,84],$VI=[1,85],$VJ=[1,86],$VK=[1,87],$VL=[1,88],$VM=[1,89],$VN=[1,92],$VO=[1,93],$VP=[25,26,45,46,94,100,101,106,107,108,109,110,111,112,113,114,115],$VQ=[2,99],$VR=[2,98],$VS=[2,109],$VT=[1,102],$VU=[1,105],$VV=[1,104],$VW=[2,97],$VX=[2,96],$VY=[1,120],$VZ=[21,25,26,37,41,42,45,46,51,60,94,100,101,106,107,108,109,110,111,112,113,114,115],$V_=[34,36,46,51],$V$=[1,153],$V01=[1,154],$V11=[21,25,26,37,41,42,51,60],$V21=[21,25,26,37,41,42,45,46,51,60,106,107,108,109,110,111,112,113,114,115],$V31=[21,25,26,37,41,42,51,60,106,107,108,109,110,111],$V41=[21,25,26,37,41,42,51,60,108,109,110,111],$V51=[42,51],$V61=[34,50,75,77,78,80,82,83,84,86,88,90,91,102,103,104,105,107],$V71=[1,237],$V81=[21,25,26,35,37,41,42,45,46,51,60,94,100,101,106,107,108,109,110,111,112,113,114,115],$V91=[1,254],$Va1=[41,42,51],$Vb1=[1,269],$Vc1=[41,59,61];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"SENTENCIAS":4,"EOF":5,"INSTRUCCIONES":6,"INSTRUCCION":7,"DEC_VAR":8,"ASIG_VAR":9,"DEC_VEC":10,"MOD_VEC":11,"DEC_LIST":12,"ADD_LIST":13,"MOD_LIST":14,"IF":15,"SWITCH_CASE":16,"WHILE":17,"FOR":18,"DO_WHILE":19,"break":20,";":21,"continue":22,"RETURN":23,"EXPRESIONES":24,"++":25,"--":26,"METODOS":27,"FUNCIONES":28,"LLAMADA":29,"PRINT":30,"MAIN":31,"LENGTH":32,"TIPO":33,"id":34,"=":35,"[":36,"]":37,"new":38,"{":39,"LISTA_VALORES":40,"}":41,",":42,"ACC_VEC":43,"list":44,"<":45,">":46,"TO_CHAR_ARRAY":47,".":48,"add":49,"(":50,")":51,"ACC_LIST":52,"if":53,"ELSE":54,"else":55,"switch":56,"CASE_LIST":57,"DEFAULT":58,"case":59,":":60,"default":61,"while":62,"for":63,"DECLARACION":64,"ACTUALIZACION":65,"do":66,"return":67,"PARAMETROS":68,"STATEMENT":69,"void":70,"PARAMETRO":71,"PARAMETROS_LLAMADA":72,"print":73,"TO_LOWER":74,"toLower":75,"TO_UPPER":76,"toUpper":77,"length":78,"EXP_LENGT":79,"cadena":80,"TRUNCATE":81,"truncate":82,"entero":83,"decimal":84,"ROUND":85,"round":86,"TYPE_OF":87,"typeof":88,"TO_STRING":89,"tostring":90,"tochararray":91,"main":92,"OP_TERNARIO":93,"?":94,"CASTEO":95,"ARITMETICAS":96,"RELACIONALES":97,"LOGICOS":98,"PRIMITIVOS":99,"&&":100,"||":101,"!":102,"caracter":103,"pfalse":104,"ptrue":105,"+":106,"-":107,"*":108,"/":109,"^":110,"%":111,"==":112,"!=":113,"<=":114,">=":115,"pint":116,"pdouble":117,"pboolean":118,"pchar":119,"pstring":120,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"break",21:";",22:"continue",25:"++",26:"--",34:"id",35:"=",36:"[",37:"]",38:"new",39:"{",41:"}",42:",",44:"list",45:"<",46:">",48:".",49:"add",50:"(",51:")",53:"if",55:"else",56:"switch",59:"case",60:":",61:"default",62:"while",63:"for",66:"do",67:"return",70:"void",73:"print",75:"toLower",77:"toUpper",78:"length",80:"cadena",82:"truncate",83:"entero",84:"decimal",86:"round",88:"typeof",90:"tostring",91:"tochararray",92:"main",94:"?",100:"&&",101:"||",102:"!",103:"caracter",104:"pfalse",105:"ptrue",106:"+",107:"-",108:"*",109:"/",110:"^",111:"%",112:"==",113:"!=",114:"<=",115:">=",116:"pint",117:"pdouble",118:"pboolean",119:"pchar",120:"pstring"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,2],[7,2],[7,1],[7,3],[7,3],[7,1],[7,1],[7,2],[7,1],[7,2],[7,2],[8,3],[8,5],[9,4],[10,11],[10,9],[40,3],[40,1],[11,4],[12,12],[12,8],[13,7],[14,4],[15,7],[15,8],[54,2],[54,4],[16,8],[16,7],[16,7],[57,5],[57,4],[58,3],[17,7],[18,10],[64,1],[64,1],[65,2],[65,2],[65,1],[19,9],[23,2],[23,3],[28,8],[28,7],[27,8],[27,7],[69,1],[68,3],[68,1],[71,2],[29,4],[29,3],[72,3],[72,1],[30,5],[74,4],[76,4],[32,4],[79,1],[79,1],[79,4],[81,4],[81,4],[81,4],[85,4],[87,4],[89,4],[47,4],[31,4],[31,5],[93,5],[95,4],[43,4],[52,6],[24,1],[24,3],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[98,3],[98,3],[98,2],[99,1],[99,1],[99,1],[99,1],[99,1],[99,1],[96,3],[96,3],[96,3],[96,3],[96,3],[96,3],[96,2],[97,3],[97,3],[97,3],[97,3],[97,3],[97,3],[33,1],[33,1],[33,1],[33,1],[33,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2: case 5: case 6: case 19: case 23: case 25: case 92: case 99: case 108: case 110:
 this.$ = $$[$0]; 
break;
case 3:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 4: case 66: case 71:
 this.$ = [$$[$0]]; 
break;
case 24: case 93:
 this.$ = $$[$0-1]; 
break;
case 28:
  this.$ = new Declarar($$[$0-1], $$[$0-2], null, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 29:
 this.$ = new Declarar($$[$0-3], $$[$0-4], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column ); 
break;
case 30:
 this.$ = new Asignar($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 36:
console.log("Se declaro la lista: " + $$[$0-7]); 
break;
case 38:
console.log("Se agrego: "+ $$[$0-2] + " en la lista: " + $$[$0-6])
break;
case 51:
 console.log("Se inicializo un for con declaracion: " + $$[$0-7] + " expresion: " + $$[$0-5] + " y actualizcion: " + $$[$0-3]); 
break;
case 58:
 this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 59:
 this.$ = new Return($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 60:
 this.$ = new Funcion($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column)
break;
case 61:
 this.$ = new Funcion($$[$0-6], $$[$0-5], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 64:
 this.$ = new Statement($$[$0], _$[$0].first_line, _$[$0].first_column) 
break;
case 65:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 67:
 this.$ = new Parametros($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 68:
 this.$ = new LlamadaFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 69:
 this.$ = new LlamadaFuncion($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 70:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 72:
 this.$ = new Print(_$[$0-4].first_line, _$[$0-4].first_column,$$[$0-2]); 
break;
case 88:
 this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 94:
 this.$ = $$[$0]; console.log("Sube el relacional"); 
break;
case 109:
 this.$ = new Acceso($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 111: case 112:
 this.$ = new Logicas($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_line); 
break;
case 113:
 this.$ = new Logicas(null, $$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_line); 
break;
case 114:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], TipoPrimitivo.Integer)
break;
case 115:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], TipoPrimitivo.Double)
break;
case 116:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], TipoPrimitivo.Char)
break;
case 117:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], TipoPrimitivo.String)
break;
case 118: case 119:
 this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], TipoPrimitivo.Boolean)
break;
case 120: case 121: case 122: case 123: case 124: case 125:
  this.$ = new OperacionAritmetica($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-1].first_column); 
break;
case 126:
  this.$ = new OperacionAritmetica($$[$0-1], $$[$0], $$[$01], _$[$0-1].first_line, _$[$0].first_column); 
break;
case 127: case 128: case 129: case 130: case 131: case 132:
  this.$  = new Relacional($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 133:
 this.$ = TipoPrimitivo.Integer; 
break;
case 134:
 this.$ = TipoPrimitivo.Double; 
break;
case 135:
 this.$ = TipoPrimitivo.Boolean; 
break;
case 136:
 this.$ = TipoPrimitivo.Char; 
break;
case 137:
 this.$ = TipoPrimitivo.String 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V0,22:$V1,23:19,24:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:$V2,43:29,44:$V3,47:45,50:$V4,52:31,53:$V5,56:$V6,62:$V7,63:$V8,66:$V9,67:$Va,70:$Vb,73:$Vc,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,92:$Vo,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},{1:[3]},{5:[1,76]},{5:[2,2],7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V0,22:$V1,23:19,24:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:$V2,43:29,44:$V3,47:45,50:$V4,52:31,53:$V5,56:$V6,62:$V7,63:$V8,66:$V9,67:$Va,70:$Vb,73:$Vc,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,92:$Vo,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},o($Vz,[2,4]),o($Vz,[2,5]),o($Vz,[2,6]),o($Vz,[2,7]),o($Vz,[2,8]),o($Vz,[2,9]),o($Vz,[2,10]),o($Vz,[2,11]),o($Vz,[2,12]),o($Vz,[2,13]),o($Vz,[2,14]),o($Vz,[2,15]),o($Vz,[2,16]),{21:[1,78]},{21:[1,79]},o($Vz,[2,19]),{25:[1,80],26:[1,81],45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},o($Vz,[2,22]),o($Vz,[2,23]),o($VP,$VQ,{21:[1,97]}),o($Vz,[2,25]),{21:[1,98]},o($VP,$VR,{21:[1,99]}),{34:[1,100],36:[1,101]},o($VP,$VS,{35:$VT,36:$VU,48:[1,103],50:$VV}),o($VP,$VW,{35:[1,106]}),{45:[1,107]},o($VP,$VX,{35:[1,108]}),{50:[1,109]},{50:[1,110]},{50:[1,111]},{50:[1,112]},{39:[1,113]},{21:[1,114],24:115,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},o($VZ,[2,92]),{24:121,29:119,32:118,33:122,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},o($VZ,[2,94]),o($VZ,[2,95]),o($VZ,[2,100]),o($VZ,[2,101]),o($VZ,[2,102]),o($VZ,[2,103]),o($VZ,[2,104]),o($VZ,[2,105]),o($VZ,[2,106]),o($VZ,[2,107]),o($VZ,[2,108]),o($VZ,[2,110]),{34:[1,123]},{50:[1,124]},{34:[1,125]},{50:[1,126]},o($V_,[2,133]),o($V_,[2,134]),o($V_,[2,135]),o($V_,[2,136]),o($V_,[2,137]),{24:127,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:128,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{50:[1,129]},{50:[1,130]},{50:[1,131]},{50:[1,132]},{50:[1,133]},{50:[1,134]},{50:[1,135]},o($VZ,[2,114]),o($VZ,[2,115]),o($VZ,[2,116]),o($VZ,[2,117]),o($VZ,[2,118]),o($VZ,[2,119]),{1:[2,1]},o($Vz,[2,3]),o($Vz,[2,17]),o($Vz,[2,18]),{21:[1,136]},{21:[1,137]},{24:138,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:139,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:140,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:141,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:142,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:143,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:144,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:145,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:146,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:147,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:148,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:149,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:150,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:151,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:152,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},o($Vz,[2,24]),o($Vz,[2,26]),o($Vz,[2,27]),{21:$V$,35:$V01,50:[1,155]},{37:[1,156]},{24:157,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{49:[1,158]},{24:161,29:119,32:118,34:$VY,43:117,47:45,50:$V4,51:[1,160],52:116,72:159,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:162,29:119,32:118,34:$VY,36:[1,163],43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:164,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{33:165,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},{24:166,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:167,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:168,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:169,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{8:171,9:172,33:173,34:[1,174],64:170,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},{6:175,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V0,22:$V1,23:19,24:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:$V2,43:29,44:$V3,47:45,50:$V4,52:31,53:$V5,56:$V6,62:$V7,63:$V8,66:$V9,67:$Va,70:$Vb,73:$Vc,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,92:$Vo,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},o($Vz,[2,58]),{21:[1,176],45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},o($VZ,$VX),o($VZ,$VW),o($VZ,$VR),o($VZ,$VQ),o($VZ,$VS,{36:$VU,50:$VV}),{45:$VA,46:$VB,51:[1,177],94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},{51:[1,178]},{50:[1,179]},{24:180,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{50:[1,181]},{34:[1,183],79:182,80:[1,184]},o($V11,[2,126],{45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO}),o($V21,[2,113],{94:$VC,100:$VD,101:$VE}),{24:185,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:186,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:187,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:188,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:189,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{24:190,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{34:[1,193],83:[1,191],84:[1,192]},o($Vz,[2,20]),o($Vz,[2,21]),o($V31,[2,120],{45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,112:$VL,113:$VM,114:$VN,115:$VO}),o($V31,[2,121],{45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,112:$VL,113:$VM,114:$VN,115:$VO}),o($V41,[2,122],{45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,112:$VL,113:$VM,114:$VN,115:$VO}),o($V41,[2,123],{45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,112:$VL,113:$VM,114:$VN,115:$VO}),o([21,25,26,37,41,42,51,60,110],[2,124],{45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO}),o($V41,[2,125],{45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,112:$VL,113:$VM,114:$VN,115:$VO}),o($V21,[2,127],{94:$VC,100:$VD,101:$VE}),o($V21,[2,128],{94:$VC,100:$VD,101:$VE}),o($V21,[2,129],{94:$VC,100:$VD,101:$VE}),o($V21,[2,130],{94:$VC,100:$VD,101:$VE}),o($V21,[2,131],{94:$VC,100:$VD,101:$VE}),o($V21,[2,132],{94:$VC,100:$VD,101:$VE}),o([21,25,26,37,41,42,45,46,51,60,100,106,107,108,109,110,111,112,113,114,115],[2,111],{94:$VC,101:$VE}),o([21,25,26,37,41,42,45,46,51,60,100,101,106,107,108,109,110,111,112,113,114,115],[2,112],{94:$VC}),{45:$VA,46:$VB,60:[1,194],94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},o($Vz,[2,28]),{24:195,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{33:199,51:[1,197],68:196,71:198,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},{34:[1,200]},{21:[1,201],45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},{50:[1,202]},{42:[1,204],51:[1,203]},o($VZ,[2,69]),o($V51,[2,71],{45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO}),{37:[1,205],45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},{24:206,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{21:[1,207],45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},{46:[1,208]},{21:[1,209],45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},{45:$VA,46:$VB,51:[1,210],94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},{45:$VA,46:$VB,51:[1,211],94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},{45:$VA,46:$VB,51:[1,212],94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},{24:213,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},o($V61,[2,52]),o($V61,[2,53]),{34:[1,214]},{35:$VT},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V0,22:$V1,23:19,24:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:$V2,41:[1,215],43:29,44:$V3,47:45,50:$V4,52:31,53:$V5,56:$V6,62:$V7,63:$V8,66:$V9,67:$Va,70:$Vb,73:$Vc,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,92:$Vo,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},o($Vz,[2,59]),o($VZ,[2,93]),{24:216,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{33:199,51:[1,218],68:217,71:198,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},{45:$VA,46:$VB,51:[1,219],94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},{24:222,29:119,32:118,34:$VY,40:221,43:117,47:45,50:$V4,51:[1,220],52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{51:[1,223]},{36:[1,224],51:[2,76]},{51:[2,77]},{45:$VA,46:$VB,51:[1,225],94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},{45:$VA,46:$VB,51:[1,226],94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},{45:$VA,46:$VB,51:[1,227],94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},{45:$VA,46:$VB,51:[1,228],94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},{45:$VA,46:$VB,51:[1,229],94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},{45:$VA,46:$VB,51:[1,230],94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},{51:[1,231]},{51:[1,232]},{51:[1,233]},{24:234,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{21:[1,235],45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},{42:$V71,51:[1,236]},{39:[1,238]},o($V51,[2,66]),{34:[1,239]},{35:[1,240]},o([5,20,22,34,41,44,50,51,53,56,59,61,62,63,66,67,70,73,75,77,78,80,82,83,84,86,88,90,91,92,102,103,104,105,107,116,117,118,119,120],[2,30]),{24:241,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},o($VZ,[2,68]),{24:242,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},o($V81,[2,90]),{37:[1,243],45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},o($Vz,[2,35]),{34:[1,244]},o($Vz,[2,39]),{39:[1,245]},{39:[1,246]},{39:[1,247]},{21:[1,248],45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},{21:$V$,35:$V01},{62:[1,249]},o($V11,[2,89],{45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO}),{42:$V71,51:[1,250]},{39:[1,251]},{21:[1,252]},{21:[2,86]},{42:$V91,51:[1,253]},o($Va1,[2,34],{45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO}),o($VZ,[2,75]),{24:255,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},o($VZ,[2,74]),o($VZ,[2,73]),o($VZ,[2,85]),o($VZ,[2,84]),o($VZ,[2,83]),o($VZ,[2,82]),o($VZ,[2,79]),o($VZ,[2,80]),o($VZ,[2,81]),o($V11,[2,88],{45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO}),o($Vz,[2,29]),{39:[1,256]},{33:199,71:257,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},{6:259,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V0,22:$V1,23:19,24:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:$V2,43:29,44:$V3,47:45,50:$V4,52:31,53:$V5,56:$V6,62:$V7,63:$V8,66:$V9,67:$Va,69:258,70:$Vb,73:$Vc,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,92:$Vo,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},o($V51,[2,67]),{38:[1,260],39:[1,261]},{45:$VA,46:$VB,51:[1,262],94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},o($V51,[2,70],{45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO}),{37:[1,263]},{35:[1,264]},{6:265,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V0,22:$V1,23:19,24:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:$V2,43:29,44:$V3,47:45,50:$V4,52:31,53:$V5,56:$V6,62:$V7,63:$V8,66:$V9,67:$Va,70:$Vb,73:$Vc,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,92:$Vo,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},{57:266,58:267,59:[1,268],61:$Vb1},{6:270,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V0,22:$V1,23:19,24:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:$V2,43:29,44:$V3,47:45,50:$V4,52:31,53:$V5,56:$V6,62:$V7,63:$V8,66:$V9,67:$Va,70:$Vb,73:$Vc,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,92:$Vo,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},{9:273,24:272,29:119,32:118,34:[1,274],43:117,47:45,50:$V4,52:116,65:271,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{50:[1,275]},{39:[1,276]},{6:259,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V0,22:$V1,23:19,24:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:$V2,43:29,44:$V3,47:45,50:$V4,52:31,53:$V5,56:$V6,62:$V7,63:$V8,66:$V9,67:$Va,69:277,70:$Vb,73:$Vc,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,92:$Vo,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},o($Vz,[2,72]),{21:[2,87]},{24:278,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{37:[1,279],45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},{6:259,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V0,22:$V1,23:19,24:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:$V2,43:29,44:$V3,47:45,50:$V4,52:31,53:$V5,56:$V6,62:$V7,63:$V8,66:$V9,67:$Va,69:280,70:$Vb,73:$Vc,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,92:$Vo,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},o($V51,[2,65]),{41:[1,281]},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V0,22:$V1,23:19,24:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:$V2,41:[2,64],43:29,44:$V3,47:45,50:$V4,52:31,53:$V5,56:$V6,62:$V7,63:$V8,66:$V9,67:$Va,70:$Vb,73:$Vc,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,92:$Vo,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},{33:282,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},{24:222,29:119,32:118,34:$VY,40:283,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{21:[1,284]},o($V81,[2,91]),{38:[1,285],47:286,91:$Vn},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V0,22:$V1,23:19,24:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:$V2,41:[1,287],43:29,44:$V3,47:45,50:$V4,52:31,53:$V5,56:$V6,62:$V7,63:$V8,66:$V9,67:$Va,70:$Vb,73:$Vc,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,92:$Vo,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},{41:[1,289],58:288,59:[1,290],61:$Vb1},{41:[1,291]},{24:292,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{60:[1,293]},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V0,22:$V1,23:19,24:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:$V2,41:[1,294],43:29,44:$V3,47:45,50:$V4,52:31,53:$V5,56:$V6,62:$V7,63:$V8,66:$V9,67:$Va,70:$Vb,73:$Vc,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,92:$Vo,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},{51:[1,295]},{25:[1,296],26:[1,297],45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},{51:[2,56]},o($VP,$VS,{35:$VT,36:$VU,50:$VV}),{24:298,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{6:259,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V0,22:$V1,23:19,24:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:$V2,43:29,44:$V3,47:45,50:$V4,52:31,53:$V5,56:$V6,62:$V7,63:$V8,66:$V9,67:$Va,69:299,70:$Vb,73:$Vc,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,92:$Vo,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},{41:[1,300]},o($Va1,[2,33],{45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO}),{51:[2,78]},{41:[1,301]},o($Vz,[2,61]),{36:[1,302]},{41:[1,303],42:$V91},o($Vz,[2,38]),{44:[1,304]},{21:[1,305]},o($Vz,[2,40],{54:306,55:[1,307]}),{41:[1,308]},o($Vz,[2,45]),{24:309,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},o($Vz,[2,46]),{45:$VA,46:$VB,60:[1,310],94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},{6:311,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V0,22:$V1,23:19,24:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:$V2,43:29,44:$V3,47:45,50:$V4,52:31,53:$V5,56:$V6,62:$V7,63:$V8,66:$V9,67:$Va,70:$Vb,73:$Vc,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,92:$Vo,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},o($Vz,[2,50]),{39:[1,312]},{51:[2,54]},{51:[2,55]},{45:$VA,46:$VB,51:[1,313],94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},{41:[1,314]},o($Vz,[2,63]),o($Vz,[2,60]),{24:315,29:119,32:118,34:$VY,43:117,47:45,50:$V4,52:116,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt},{21:[1,316]},{45:[1,317]},o($Vz,[2,37]),o($Vz,[2,41]),{15:318,39:[1,319],53:$V5},o($Vz,[2,44]),{45:$VA,46:$VB,60:[1,320],94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},{6:321,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V0,22:$V1,23:19,24:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:$V2,43:29,44:$V3,47:45,50:$V4,52:31,53:$V5,56:$V6,62:$V7,63:$V8,66:$V9,67:$Va,70:$Vb,73:$Vc,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,92:$Vo,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V0,22:$V1,23:19,24:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:$V2,41:[2,49],43:29,44:$V3,47:45,50:$V4,52:31,53:$V5,56:$V6,62:$V7,63:$V8,66:$V9,67:$Va,70:$Vb,73:$Vc,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,92:$Vo,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},{6:322,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V0,22:$V1,23:19,24:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:$V2,43:29,44:$V3,47:45,50:$V4,52:31,53:$V5,56:$V6,62:$V7,63:$V8,66:$V9,67:$Va,70:$Vb,73:$Vc,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,92:$Vo,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},{21:[1,323]},o($Vz,[2,62]),{37:[1,324],45:$VA,46:$VB,94:$VC,100:$VD,101:$VE,106:$VF,107:$VG,108:$VH,109:$VI,110:$VJ,111:$VK,112:$VL,113:$VM,114:$VN,115:$VO},o($Vz,[2,32]),{33:325,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},o($Vz,[2,42]),{6:326,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V0,22:$V1,23:19,24:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:$V2,43:29,44:$V3,47:45,50:$V4,52:31,53:$V5,56:$V6,62:$V7,63:$V8,66:$V9,67:$Va,70:$Vb,73:$Vc,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,92:$Vo,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},{6:327,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V0,22:$V1,23:19,24:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:$V2,43:29,44:$V3,47:45,50:$V4,52:31,53:$V5,56:$V6,62:$V7,63:$V8,66:$V9,67:$Va,70:$Vb,73:$Vc,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,92:$Vo,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},o($Vc1,[2,48],{8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,23:19,24:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,43:29,52:31,96:38,97:40,98:41,95:42,76:43,74:44,47:45,89:46,87:47,85:48,81:49,93:50,99:51,7:77,20:$V0,22:$V1,34:$V2,44:$V3,50:$V4,53:$V5,56:$V6,62:$V7,63:$V8,66:$V9,67:$Va,70:$Vb,73:$Vc,75:$Vd,77:$Ve,78:$Vf,80:$Vg,82:$Vh,83:$Vi,84:$Vj,86:$Vk,88:$Vl,90:$Vm,91:$Vn,92:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy}),{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V0,22:$V1,23:19,24:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:$V2,41:[1,328],43:29,44:$V3,47:45,50:$V4,52:31,53:$V5,56:$V6,62:$V7,63:$V8,66:$V9,67:$Va,70:$Vb,73:$Vc,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,92:$Vo,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},o($Vz,[2,57]),{21:[1,329]},{46:[1,330]},{7:77,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V0,22:$V1,23:19,24:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,34:$V2,41:[1,331],43:29,44:$V3,47:45,50:$V4,52:31,53:$V5,56:$V6,62:$V7,63:$V8,66:$V9,67:$Va,70:$Vb,73:$Vc,74:44,75:$Vd,76:43,77:$Ve,78:$Vf,80:$Vg,81:49,82:$Vh,83:$Vi,84:$Vj,85:48,86:$Vk,87:47,88:$Vl,89:46,90:$Vm,91:$Vn,92:$Vo,93:50,95:42,96:38,97:40,98:41,99:51,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy},o($Vc1,[2,47],{8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,23:19,24:20,27:21,28:22,29:23,30:24,31:25,32:26,33:27,43:29,52:31,96:38,97:40,98:41,95:42,76:43,74:44,47:45,89:46,87:47,85:48,81:49,93:50,99:51,7:77,20:$V0,22:$V1,34:$V2,44:$V3,50:$V4,53:$V5,56:$V6,62:$V7,63:$V8,66:$V9,67:$Va,70:$Vb,73:$Vc,75:$Vd,77:$Ve,78:$Vf,80:$Vg,82:$Vh,83:$Vi,84:$Vj,86:$Vk,88:$Vl,90:$Vm,91:$Vn,92:$Vo,102:$Vp,103:$Vq,104:$Vr,105:$Vs,107:$Vt,116:$Vu,117:$Vv,118:$Vw,119:$Vx,120:$Vy}),o($Vz,[2,51]),o($Vz,[2,31]),{21:[1,332]},o($Vz,[2,43]),o($Vz,[2,36])],
defaultActions: {76:[2,1],184:[2,77],220:[2,86],253:[2,87],273:[2,56],279:[2,78],296:[2,54],297:[2,55]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

        let TipoPrimitivo               =   require("../Entorno/Simbolos/TipoPrimitivo").TipoPrimitivo;
        
        /*Expresiones*/
        let Primitivo                   =   require("../Expresiones/Primitivo").Primitivo;                    
        let Acceso                      =   require("../Expresiones/Acceso").Acceso;
        let OperacionAritmetica         =   require("../Expresiones/OperacionAritmetica").OperacionAritmetica;
        let Relacional                  =   require("../Expresiones/Relacional").Relacional;
        let Ternario                    =   require("../Expresiones/Ternario").Ternario;
        let Logicas                     =   require("../Expresiones/Logicas").Logicas;
        let Parametros                  =   require("../Expresiones/Parametros").Parametros;
        let LlamadaFuncion              =   require("../Expresiones/LlamadaFuncion").LlamadaFuncion;
        let Return                      =   require("../Expresiones/Return").ReturnExpression;

        /*Instrucciones*/
        let Print                       =   require("../Instrucciones/Print").Print;
        let Declarar                    =   require("../Instrucciones/Declarar").Declarar;
        let Asignar                     =   require("../Instrucciones/Asignar").Asignar;
        let Funcion                     =   require("../Instrucciones/Funcion").Funcion;
        let Statement                   =   require("../Instrucciones/Statement").Statement;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* IGNORE */
break;
case 2:/* IGNORE */
break;
case 3: return 116; 
break;
case 4: return 117; 
break;
case 5: return 118; 
break;
case 6: return 119; 
break;
case 7: return 120; 
break;
case 8: return 105; 
break;
case 9: return 104; 
break;
case 10: return 38; 
break;
case 11: return 44; 
break;
case 12: return 49; 
break;
case 13: return 53; 
break;
case 14: return 55; 
break;
case 15: return 56; 
break;
case 16: return 59; 
break;
case 17: return 61;
break;
case 18: return 20;
break;
case 19: return 22;
break;
case 20: return 67;
break;
case 21: return 62;
break;
case 22: return 63;
break;
case 23: return 66;
break;
case 24: return 70;
break;
case 25: return 73;
break;
case 26: return 75;
break;
case 27: return 77;
break;
case 28: return 78;
break;
case 29: return 82;
break;
case 30: return 86;
break;
case 31: return 88;
break;
case 32: return 90;
break;
case 33: return 91;
break;
case 34: return 92;
break;
case 35:yy_.yytext = yy_.yytext.toLowerCase();                  return 34;
break;
case 36:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);             return 80;
break;
case 37:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);             return 103;
break;
case 38:return 84;
break;
case 39:return 83;
break;
case 40: return 25; 
break;
case 41: return 26; 
break;
case 42: return 106; 
break;
case 43: return 107; 
break;
case 44: return 108; 
break;
case 45: return 109; 
break;
case 46: return 110; 
break;
case 47: return 111; 
break;
case 48: return 112; 
break;
case 49: return 113; 
break;
case 50: return 114; 
break;
case 51: return 45; 
break;
case 52: return 115; 
break;
case 53: return 46; 
break;
case 54: return 94; 
break;
case 55: return 60; 
break;
case 56: return 101; 
break;
case 57: return 100; 
break;
case 58: return 102; 
break;
case 59: return 50; 
break;
case 60: return 51; 
break;
case 61: return 21; 
break;
case 62: return 39; 
break;
case 63: return 41; 
break;
case 64: return 36; 
break;
case 65: return 37; 
break;
case 66: return 35; 
break;
case 67: return 42; 
break;
case 68: return 48; 
break;
case 69:return 5;
break;
case 70: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:\/\*([^*]|\*(?!\/))*\*\/)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:list\b)/i,/^(?:add\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:void\b)/i,/^(?:print\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:truncate\b)/i,/^(?:round\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:main\b)/i,/^(?:([a-zA-ZÑñ]|(_[a-zA-ZÑñ]))([a-zA-ZÑñ]|[0-9]|_)*)/i,/^(?:"([a-zA-Z]|[0-9]|[!]|[#-&]|[(-/)]|[\:-@]|[\[]|[\]]|[_]|[\|]|\\t|\s)+")/i,/^(?:'[!-~]')/i,/^(?:[0-9]+\.[0-9]+)/i,/^(?:[0-9]+)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:=)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}